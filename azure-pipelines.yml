trigger:
  branches:
    include:
      - master
pr:
  branches:
    include:
      - master

jobs:
  - job: "General"
    steps:
      # Default environments in Azure don't include JavaFX which we need for JVM sample,
      # so we install and use a version that does.
      # Running general build on Linux because JS was having trouble on Mac
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            mkdir -p ./jdk/binaries/
            curl https://cdn.azul.com/zulu/bin/zulu11.56.19-ca-fx-jdk11.0.15-linux_x64.tar.gz --output ./jdk/zulu11.56.19-ca-fx-jdk11.0.15-linux_x64.tar.gz 

      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            sudo apt-get install liblmdb-dev

      - task: JavaToolInstaller@0
        inputs:
          jdkFile: ./jdk/zulu11.56.19-ca-fx-jdk11.0.15-linux_x64.tar.gz
          versionSpec: "11"
          jdkArchitectureOption: x64
          jdkSourceOption: LocalDirectory
          jdkDestinationDirectory: "./jdk/binaries/"
          cleanDestinationDirectory: true

      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          tasks: 'clean build check publishToMavenLocal --info --stacktrace'

      - task: Gradle@2
        inputs:
          workingDirectory: 'sample'
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          tasks: 'clean build check assemble'

    pool:
      vmImage: 'ubuntu-latest'

  - job: "Mac"
    steps:
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          tasks: 'clean macosX64Test iosX64Test watchosX64Test watchosX86Test tvosX64Test publishKotlinMultiplatformPublicationToMavenLocal publishIosArm32PublicationToMavenLocal publishIosArm64PublicationToMavenLocal publishIosSimulatorArm64PublicationToMavenLocal publishIosX64PublicationToMavenLocal publishMacosX64PublicationToMavenLocal publishMacosArm64PublicationToMavenLocal publishWatchosArm32PublicationToMavenLocal publishWatchosArm64PublicationToMavenLocal publishWatchosSimulatorArm64PublicationToMavenLocal publishWatchosX86PublicationToMavenLocal publishWatchosX64PublicationToMavenLocal publishTvosArm64PublicationToMavenLocal publishTvosSimulatorArm64PublicationToMavenLocal publishTvosX64PublicationToMavenLocal'
          
      - task: Gradle@2
        inputs:
          workingDirectory: 'sample'
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          tasks: 'clean iosX64Test'

    # TODO disabled because embedAndSign task needs more signing/provisioning config
    #      - task: Xcode@5
    #        inputs:
    #          actions: 'build'
    #          configuration: 'Debug'
    #          scheme: 'SettingsDemo'
    #          sdk: 'iphoneos'
    #          packageApp: false
    #          signingOption: default
    #          args: '-allowProvisioningUpdates'

    # TODO Disabled because it isn't working in Azure
    #      - task: Xcode@5
    #        inputs:
    #          actions: 'build'
    #          configuration: 'Debug'
    #          scheme: 'SettingsDemo'
    #          sdk: 'iphonesimulator'
    #          packageApp: false

    pool:
      vmImage: 'macos-latest'

  - job: "Windows"
    steps:
      - task: Gradle@2
        inputs:
          workingDirectory: ''
          gradleWrapperFile: 'gradlew'
          gradleOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          tasks: 'clean mingwX64Test publishKotlinMultiplatformPublicationToMavenLocal publishMingwX64PublicationToMavenLocal publishMingwX86PublicationToMavenLocal'

    pool:
      vmImage: 'windows-latest'
